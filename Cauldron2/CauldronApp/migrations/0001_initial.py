# Generated by Django 3.1.1 on 2020-09-28 11:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('poolsched', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=32)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SHTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_date', models.DateTimeField()),
                ('started_date', models.DateTimeField(null=True)),
                ('completed_date', models.DateTimeField(null=True)),
                ('done', models.BooleanField(default=False)),
                ('log_file', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend',
                 models.CharField(choices=[('GI', 'Git'), ('GH', 'GitHub'), ('GL', 'GitLab'), ('MU', 'Meetup')],
                                  default='UK', max_length=2)),
                ('projects', models.ManyToManyField(to='CauldronApp.Project')),
            ],
        ),
        migrations.CreateModel(
            name='GitHubRepository',
            fields=[
                ('owner', models.CharField(max_length=40)),
                ('repo', models.CharField(max_length=100)),
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='github', serialize=False, to='CauldronApp.repository')),
            ],
            bases=('CauldronApp.repository',),
        ),
        migrations.CreateModel(
            name='GitLabRepository',
            fields=[
                ('owner', models.CharField(max_length=40)),
                ('repo', models.CharField(max_length=100)),
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gitlab', serialize=False, to='CauldronApp.repository')),
            ],
            bases=('CauldronApp.repository',),
        ),
        migrations.CreateModel(
            name='GitRepository',
            fields=[
                ('url', models.CharField(max_length=255, unique=True)),
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='git', serialize=False, to='CauldronApp.repository')),
            ],
            bases=('CauldronApp.repository',),
        ),
        migrations.CreateModel(
            name='MeetupRepository',
            fields=[
                ('group', models.CharField(max_length=100)),
                ('parent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='meetup', serialize=False, to='CauldronApp.repository')),
            ],
            bases=('CauldronApp.repository',),
        ),
        migrations.CreateModel(
            name='UserWorkspace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_name', models.CharField(max_length=100)),
                ('tenant_role', models.CharField(max_length=100)),
                ('backend_role', models.CharField(max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=255, unique=True)),
                ('backend_role', models.CharField(max_length=255, unique=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='CauldronApp.project')),
            ],
        ),
        migrations.CreateModel(
            name='MeetupUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('photo', models.URLField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GitlabUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('photo', models.URLField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GithubUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('photo', models.URLField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnonymousUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.UniqueConstraint(fields=('name', 'created'), name='unique_project_name_user'),
        ),
        migrations.AddField(
            model_name='meetuprepository',
            name='repo_sched',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poolsched.meetuprepo'),
        ),
        migrations.AddField(
            model_name='gitrepository',
            name='repo_sched',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poolsched.gitrepo'),
        ),
        migrations.AddField(
            model_name='gitlabrepository',
            name='repo_sched',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poolsched.glrepo'),
        ),
        migrations.AddField(
            model_name='githubrepository',
            name='repo_sched',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='poolsched.ghrepo'),
        ),
    ]
